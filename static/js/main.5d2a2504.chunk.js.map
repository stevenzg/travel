{"version":3,"sources":["containers/attractions/list.jsx","containers/attractions/detail.jsx","App.js","serviceWorker.js","index.js"],"names":["skip","AttractionList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInfiniteLoad","setState","isInfiniteLoading","attractions","state","fetch","concat","then","response","json","_this2","react_default","a","createElement","className","AttractionsComp","map","attr","idx","key","Link","to","_id","name","react_infinite_default","containerHeight","elementHeight","infiniteLoadBeginEdgeOffset","onInfiniteLoad","loadingSpinnerDelegate","elementInfiniteLoad","Component","AttractionDetail","attraction","id","match","params","document","title","dangerouslySetInnerHTML","__html","detail","App","console","log","HashRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d2a2504.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom'\nimport Infinite from 'react-infinite'\n\nimport './list.css'\n\nlet skip = 0\n\nclass AttractionList extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      attractions: [],\n      isInfiniteLoading: false\n    }\n  }\n\n  async componentDidMount() {\n    fetch(\n      'https://travel-server-api.davidc.ai/attractions?token=10ktfn&limit=20&skip=0'\n    )\n      .then(response => response.json())\n      .then(json => this.setState({ attractions: json }))\n  }\n\n  elementInfiniteLoad() {\n    return <div className=\"infinite-list-loading\">正在加载....</div>\n  }\n\n  handleInfiniteLoad = () => {\n    skip += 10\n    this.setState({\n      isInfiniteLoading: true\n    })\n\n    const { attractions } = this.state\n\n    fetch(\n      `https://travel-server-api.davidc.ai/attractions?token=10ktfn&limit=20&skip=${skip}`\n    )\n      .then(response => response.json())\n      .then(json => {\n        this.setState({ attractions: attractions.concat(json) })\n        this.setState({\n          isInfiniteLoading: false\n        })\n      })\n  }\n\n  render() {\n    const { attractions } = this.state\n\n    const AttractionsComp = attractions.map((attr, idx) => {\n      return (\n        <div className=\"attraction-item\" key={idx}>\n          <Link to={`/attraction/${attr._id}`}>{attr.name}</Link>\n        </div>\n      )\n    })\n\n    // return <div>{AttractionsComp}</div>\n\n    return (\n      <Infinite\n        containerHeight={600}\n        elementHeight={40}\n        infiniteLoadBeginEdgeOffset={580}\n        onInfiniteLoad={this.handleInfiniteLoad}\n        loadingSpinnerDelegate={this.elementInfiniteLoad()}\n        isInfiniteLoading={this.state.isInfiniteLoading}\n      >\n        {AttractionsComp}\n      </Infinite>\n    )\n  }\n}\n\nexport default AttractionList\n","import React, { Component } from 'react'\nimport './detail.css'\n\nclass AttractionDetail extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      attraction: {}\n    }\n  }\n\n  async componentDidMount() {\n    const { id } = this.props.match.params\n    fetch(`https://travel-server-api.davidc.ai/attractions/${id}?token=10ktfn`)\n      .then(response => response.json())\n      .then(json => {\n        document.title = json.name\n        this.setState({ attraction: json })\n      })\n  }\n\n  render() {\n    const { attraction } = this.state\n\n    return (\n      <div className=\"attraction-detail\">\n        <div className=\"name\">{attraction.name}</div>\n        <div\n          className=\"detail\"\n          dangerouslySetInnerHTML={{ __html: attraction.detail }}\n        />\n      </div>\n    )\n  }\n}\n\nexport default AttractionDetail\n","import React, { Component } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport AttractionList from './containers/attractions/list'\nimport AttractionDetail from './containers/attractions/detail'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      attractions: []\n    }\n  }\n\n  render() {\n    const { attractions } = this.state\n    console.log('attractions::', attractions)\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={AttractionList} />\n          <Route exact path=\"/attractions\" component={AttractionList} />\n          <Route exact path=\"/attraction/:id\" component={AttractionDetail} />\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}